// Lexical grammar

%lex

%%

\/\/.*                       %empty
\/\*[\s\S]*?\*\/             %empty
\s+                          %empty
\d+(\.\d+)?                  NUMBER
\"[^\"]*\"                   STRING
[\w\-*+/<>=!]+                SYMBOL

/lex

// Syntax grammar
%{

#include <string>
#include <vector>

enum class ExpType {
  NUMBER,
  STRING,
  SYMBOL,
  LIST,
};

struct Exp {
  ExpType type;

  double number;
  std::string string;
  std::vector<Exp> list;

  Exp(double number) : type(ExpType::NUMBER), number(number) {}
  Exp(std::string str) {
    if (str[0] == '"') {
      type = ExpType::STRING;
      string = str.substr(1, str.size() - 2);
    } else {
      type = ExpType::SYMBOL;
      string = str;
    }
  }
  Exp(std::vector<Exp> list) : type(ExpType::LIST), list(list) {}
};

using Value = Exp;

%}

%%

Exp
    : Atom
    | List
    ;

Atom
    : NUMBER     { $$ = Exp(std::stod($1)) }
    | STRING     { $$ = Exp($1) }
    | SYMBOL     { $$ = Exp($1) }
    ;

List
    : '(' ListEntries ')'       { $$ = $2 }
    ;

ListEntries
    : ListEntries Exp   { $1.list.push_back($2); $$ = $1 }
    | %empty            { $$ = Exp(std::vector<Exp>{}) }
    ;
